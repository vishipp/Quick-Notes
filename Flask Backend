from flask import Flask, request, jsonify, render_template
import os
import openai
import pytesseract
from PIL import Image
import pymupdf  # For PDFs
from docx import Document
from werkzeug.exceptions import HTTPException
from dotenv import load_dotenv
import logging

# Setup
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# Error handler
@app.errorhandler(Exception)
def handle_error(e):
    logger.error(f"Error: {str(e)}", exc_info=True)
    if isinstance(e, HTTPException):
        return jsonify({
            "success": False,
            "error": e.description,
            "type": "http_error"
        }), e.code
    return jsonify({
        "success": False,
        "error": "Internal server error",
        "type": "server_error"
    }), 500


# File processors
def extract_text_from_pdf(file_path):
    try:
        doc = pymupdf.open(file_path)
        return " ".join([page.get_text() for page in doc])
    except Exception as e:
        raise Exception(f"PDF processing failed: {str(e)}")


def extract_text_from_docx(file_path):
    try:
        return "\n".join([p.text for p in Document(file_path).paragraphs])
    except Exception as e:
        raise Exception(f"DOCX processing failed: {str(e)}")


def extract_text_from_image(file_path):
    try:
        return pytesseract.image_to_string(Image.open(file_path))
    except Exception as e:
        raise Exception(f"Image processing failed: {str(e)}")


def summarize_text(text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": f"Summarize this in 3 bullet points:\n{text[:10000]}"
            }],
            timeout=10  # seconds
        )
        return response.choices[0].message.content
    except Exception as e:
        raise Exception(f"Summarization failed: {str(e)}")


# Routes
@app.route("/")
def home():
    return render_template("index.html")


@app.route("/process", methods=["POST"])
def process():
    try:
        # Validate request
        if 'file' not in request.files:
            raise ValueError("No file uploaded")

        file = request.files['file']
        if not file.filename:
            raise ValueError("No file selected")

        # Validate extension
        valid_extensions = {'.pdf', '.docx', '.jpg', '.jpeg', '.png'}
        if not file.filename.lower().endswith(tuple(valid_extensions)):
            raise ValueError(f"Unsupported file type. Use: {', '.join(valid_extensions)}")

        # Save temporarily
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)

        # Process file
        if file.filename.lower().endswith('.pdf'):
            text = extract_text_from_pdf(filepath)
        elif file.filename.lower().endswith('.docx'):
            text = extract_text_from_docx(filepath)
        else:
            text = extract_text_from_image(filepath)

        # Generate summary
        summary = summarize_text(text)

        return jsonify({
            "success": True,
            "filename": file.filename,
            "summary": summary,
            "text_preview": text[:300] + ("..." if len(text) > 300 else "")
        })

    except Exception as e:
        logger.error(f"Processing failed: {str(e)}")
        raise  # Handled by the global error handler

    finally:
        # Clean up
        if 'filepath' in locals() and os.path.exists(filepath):
            os.remove(filepath)


if __name__ == "__main__":
    app.run(port=5001, debug=True)
